@page "/chat"
@using Ai.Tlbx.RealTimeAudio.OpenAi
@using Ai.Tlbx.RealTimeAudio.OpenAi.Models
@implements IDisposable

<div class="chat-container">
    <div class="chat-messages">
        @foreach (var message in Messages)
        {
            <div class="chat-message @(message.Type.ToString().ToLower())">
                @if (message.Type == MessageType.Tool)
                {
                    <span class="tool-call">[Tool Call] @message.Content</span>
                }
                else
                {
                    <span>@message.Content</span>
                }
            </div>
        }
    </div>
</div>

@code {
    [CascadingParameter] protected OpenAiRealTimeApiAccess? RealTimeApi { get; set; }
    
    public List<ChatMessage> Messages { get; set; } = new List<ChatMessage>();

    public enum MessageType { User, Ai, Tool }

    public class ChatMessage
    {
        public string Content { get; set; } = string.Empty;
        public MessageType Type { get; set; } = MessageType.User;
    }

    protected override void OnInitialized()
    {
        if (RealTimeApi != null)
        {
            // Subscribe to the message added event to update the chat
            RealTimeApi.OnMessageAdded = OnMessageAdded;
        }
    }
    
    private void OnMessageAdded(OpenAiChatMessage message)
    {
        MessageType type = MessageType.Ai;
        
        if (message.Role == "tool")
        {
            type = MessageType.Tool;
        }
        else if (message.Role == "user")
        {
            type = MessageType.User;
        }
        
        Messages.Add(new ChatMessage 
        { 
            Content = message.Content, 
            Type = type 
        });
        
        StateHasChanged();
    }
    
    public void Dispose()
    {
        if (RealTimeApi != null)
        {
            RealTimeApi.OnMessageAdded = null;
        }
    }
}
