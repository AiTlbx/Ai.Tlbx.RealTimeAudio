@page "/status"

<h3>Status and Errors</h3>

<div class="status-container">
    <div class="status-message" style="color: @(StatusColor)">@CurrentStatus</div>
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="error-message">Error: @ErrorMessage</div>
    }
    @if (IsMicrophoneTesting)
    {
        <div class="mic-testing-message">Microphone Testing in Progress...</div>
    }
</div>

@code {
    private string _statusColor = "green";
    
    [Parameter]
    public string ConnectionStatus { get; set; } = "Idle";
    
    [Parameter]
    public string Error { get; set; } = string.Empty;
    
    [Parameter]
    public bool IsMicrophoneTesting { get; set; } = false;

    // Properties updated based on parameters
    public string CurrentStatus => ConnectionStatus;
    public string StatusColor => _statusColor;
    public string ErrorMessage => Error;
    
    // Method to be called by parent component to update status
    public void UpdateStatus(string status, string color = "green")
    {
        ConnectionStatus = status;
        _statusColor = color;
        StateHasChanged();
    }

    // Method to display error messages
    public void ShowError(string error)
    {
        Error = error;
        _statusColor = "red";
        StateHasChanged();
    }
    
    // React to parameter changes
    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(Error))
        {
            _statusColor = "red";
        }
    }
}
