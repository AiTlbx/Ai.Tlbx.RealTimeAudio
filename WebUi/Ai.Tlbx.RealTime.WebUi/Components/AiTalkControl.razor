@page "/aitalk"

<div class="ai-talk-control">
    <div class="control-buttons">
        @if (Loading)
        {
            <div class="spinner">
                <div class="spinner-inner"></div>
                <span class="sr-only">Loading...</span>
            </div>
        }
        <button @onclick="StartTalk" 
                disabled="@IsTalking" 
                class="start-button @(IsTalking ? "disabled" : "")">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
            </svg>
            Start Voice Chat
        </button>
        <button @onclick="StopTalk" 
                disabled="@(!IsTalking)"
                class="stop-button @(!IsTalking ? "disabled" : "")">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z" clip-rule="evenodd" />
            </svg>
            Stop Voice
        </button>
    </div>
</div>

@code {
    [Parameter] public bool IsTalking { get; set; } = false;
    [Parameter] public bool Loading { get; set; } = false;
    [Parameter] public EventCallback OnStartTalking { get; set; }
    [Parameter] public EventCallback OnStopTalking { get; set; }

    private async Task StartTalk()
    {
        IsTalking = true;
        await OnStartTalking.InvokeAsync();
    }

    private async Task StopTalk()
    {
        IsTalking = false;
        await OnStopTalking.InvokeAsync();
    }
}
