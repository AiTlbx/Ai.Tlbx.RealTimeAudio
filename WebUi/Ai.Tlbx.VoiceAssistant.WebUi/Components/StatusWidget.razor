@page "/status"

<div class="border-t pt-3">
    <label class="block text-xs font-medium text-gray-600 mb-1">Status</label>
    <div class="text-xs px-2 py-1 rounded @(GetStatusClasses())">
        @if (IsMicrophoneTesting)
        {
            <span>Testing microphone...</span>
        }
        else if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <span>@ErrorMessage</span>
        }
        else
        {
            <span>@(string.IsNullOrEmpty(CurrentStatus) ? "Ready" : CurrentStatus)</span>
        }
    </div>
</div>

@code {
    private string _statusColor = "green";
    
    [Parameter]
    public string ConnectionStatus { get; set; } = "Idle";
    
    [Parameter]
    public string Error { get; set; } = string.Empty;
    
    [Parameter]
    public bool IsMicrophoneTesting { get; set; } = false;

    // Properties updated based on parameters
    public string CurrentStatus => ConnectionStatus;
    public string StatusColor => _statusColor;
    public string ErrorMessage => Error;
    
    // Method to be called by parent component to update status
    public void UpdateStatus(string status, string color = "green")
    {
        ConnectionStatus = status;
        _statusColor = color;
        StateHasChanged();
    }

    // Method to display error messages
    public void ShowError(string error)
    {
        Error = error;
        _statusColor = "red";
        StateHasChanged();
    }
    
    // React to parameter changes
    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(Error))
        {
            _statusColor = "red";
        }
    }
    
    private string GetStatusClasses()
    {
        if (!string.IsNullOrEmpty(ErrorMessage))
            return "bg-red-50 text-red-700";
        else if (IsMicrophoneTesting)
            return "bg-blue-50 text-blue-700";
        else
            return "bg-gray-50 text-gray-700";
    }
}
